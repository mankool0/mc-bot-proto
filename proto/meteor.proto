syntax = "proto3";

package mankool.mcbot.protocol;

// Meteor Client module management

message RGBAColor {
  uint32 red = 1;
  uint32 green = 2;
  uint32 blue = 3;
  uint32 alpha = 4;
}

message Vector3d {
  double x = 1;
  double y = 2;
  double z = 3;
}

message Keybind {
  string key_name = 1;
}

message ESPBlockData {
  enum ShapeMode {
    LINES = 0;
    SIDES = 1;
    BOTH = 2;
  }

  ShapeMode shape_mode = 1;
  RGBAColor line_color = 2;
  RGBAColor side_color = 3;
  bool tracer = 4;
  RGBAColor tracer_color = 5;
}

message BlockList {
  repeated string blocks = 1;
}

message ItemList {
  repeated string items = 1;
}

message EntityTypeList {
  repeated string entity_types = 1;
}

message StatusEffectList {
  repeated string effects = 1;
}

message ParticleTypeList {
  repeated string particles = 1;
}

message ModuleList {
  repeated string modules = 1;
}

message PacketList {
  repeated string packets = 1;
}

message StorageBlockList {
  repeated string storage_blocks = 1;
}

message SoundEventList {
  repeated string sounds = 1;
}

message ScreenHandlerList {
  repeated string handlers = 1;
}

message EnchantmentList {
  repeated string enchantments = 1;
}

message MeteorStringList {
  repeated string strings = 1;
}

message MeteorSettingValue {
  oneof value {
    bool bool_value = 1;
    int32 int_value = 2;
    double double_value = 3;
    float float_value = 4;
    int64 long_value = 5;
    string string_value = 6;
    RGBAColor color_value = 7;
    Keybind keybind_value = 8;
    Vector3d vector3d_value = 9;
    BlockList block_list_value = 10;
    ItemList item_list_value = 11;
    EntityTypeList entity_type_list_value = 12;
    StatusEffectList status_effect_list_value = 13;
    ParticleTypeList particle_type_list_value = 14;
    ModuleList module_list_value = 15;
    PacketList packet_list_value = 16;
    EnchantmentList enchantment_list_value = 17;
    StorageBlockList storage_block_list_value = 18;
    SoundEventList sound_event_list_value = 19;
    ScreenHandlerList screen_handler_list_value = 20;
    MeteorStringList string_list_value = 21;
    ESPBlockData esp_block_data_value = 22;
    BlockESPConfigMap block_esp_config_map_value = 23;
  }
}

message BlockESPConfigMap {
  map<string, ESPBlockData> configs = 1;
}

message SettingInfo {
  string name = 1;

  enum SettingType {
    BOOLEAN = 0;
    INTEGER = 1;
    DOUBLE = 2;
    FLOAT = 3;
    LONG = 4;
    STRING = 5;
    ENUM = 6;
    COLOR = 7;
    KEYBIND = 8;
    VECTOR3D = 9;
    BLOCK_LIST = 10;
    ITEM_LIST = 11;
    ENTITY_TYPE_LIST = 12;
    STATUS_EFFECT_LIST = 13;
    PARTICLE_TYPE_LIST = 14;
    MODULE_LIST = 15;
    PACKET_LIST = 16;
    ENCHANTMENT_LIST = 17;
    STORAGE_BLOCK_LIST = 18;
    SOUND_EVENT_LIST = 19;
    SCREEN_HANDLER_LIST = 20;
    STRING_LIST = 21;
    POTION = 22;
    GENERIC = 23;
    BLOCK_DATA = 24;
  }

  SettingType type = 2;
  optional string description = 3;
  optional string group_name = 4;
  MeteorSettingValue current_value = 5;
  optional MeteorSettingValue default_value = 6;
  repeated string possible_values = 10;
  optional double min_value = 11;
  optional double max_value = 12;
}

// Module information
message ModuleInfo {
  string name = 1;
  string category = 2;
  bool enabled = 3;
  string description = 4;
  repeated SettingInfo settings = 5;
}

// Request all available modules (Manager -> Client)
message GetModulesRequest {
  optional string category_filter = 1;  // Optional: filter by category
}

// Response with all modules (Client -> Manager)
message GetModulesResponse {
  repeated ModuleInfo modules = 1;
}

// Set module configuration (Manager -> Client)
message SetModuleConfigCommand {
  string module_name = 1;
  optional bool enabled = 2;                        // Enable/disable the module
  map<string, MeteorSettingValue> settings = 3;     // Setting path -> typed value (use "group.name" format for grouped settings)
}

// Response to module config change (Client -> Manager)
message SetModuleConfigResponse {
  bool success = 1;
  string error_message = 2;
  ModuleInfo updated_module = 3;        // Return updated module state
}

// Notify manager of module state change (Client -> Manager)
// Useful for when modules are toggled manually or by other means
message ModuleStateChanged {
  string module_name = 1;
  optional bool enabled = 2;                            // If present, module was toggled
  map<string, MeteorSettingValue> changed_settings = 3; // Settings that changed (path -> typed new value)
}