syntax = "proto3";

package mankool.mcbot.protocol;

// Setting information
message BaritoneSettingInfo {
  string name = 1;
  string type = 2;                      // Class type (Boolean, Integer, Double, etc.)
  string current_value = 3;
  string default_value = 4;
  optional string description = 5;
}

// Command information
message BaritoneCommandInfo {
  string name = 1;                      // Primary command name
  repeated string aliases = 2;          // All command aliases
  string short_desc = 3;                // Short single-line description
  repeated string long_desc = 4;        // Detailed usage information with arguments
}

// Request settings (Manager -> Client)
message GetBaritoneSettingsRequest {
  repeated string setting_names = 1;    // Optional: specific settings to query (empty = all settings)
}

// Response with settings (Client -> Manager)
message GetBaritoneSettingsResponse {
  repeated BaritoneSettingInfo settings = 1;
}

// Request all available commands (Manager -> Client)
message GetBaritoneCommandsRequest {
}

// Response with all commands (Client -> Manager)
message GetBaritoneCommandsResponse {
  repeated BaritoneCommandInfo commands = 1;
}

// Set Baritone settings (Manager -> Client)
message SetBaritoneSettingsCommand {
  map<string, string> settings = 1;    // Setting name -> value
}

// Response to settings change (Client -> Manager)
message SetBaritoneSettingsResponse {
  bool success = 1;
  string result = 2;                    // Error message if failed, success message if succeeded
  repeated BaritoneSettingInfo updated_settings = 3;  // Return updated settings
}

// Execute Baritone command (Manager -> Client)
message ExecuteBaritoneCommand {
  string command = 1;                   // Full command string (e.g., "goto 0 100 0")
}

// Response to command execution (Client -> Manager)
message ExecuteBaritoneCommandResponse {
  bool success = 1;
  string result = 2;                    // Error message if failed, command output if succeeded
}

// Notify manager of setting update (Client -> Manager)
// Useful for when settings are changed manually or by other means
message BaritoneSettingUpdate {
  string setting_name = 1;
  string new_value = 2;
}